/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sensor.proto */

#ifndef PROTOBUF_C_sensor_2eproto__INCLUDED
#define PROTOBUF_C_sensor_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Sensor__SinglePhase Sensor__SinglePhase;
typedef struct _Sensor__ThreePhase Sensor__ThreePhase;
typedef struct _Sensor__DeviceRegister Sensor__DeviceRegister;
typedef struct _Sensor__Message Sensor__Message;


/* --- enums --- */


/* --- messages --- */

/*
 *单相
 */
struct  _Sensor__SinglePhase
{
  ProtobufCMessage base;
  /*
   *消息类型:电流传感器（1）,温度（2）,电表（3）.....
   */
  int32_t message_type;
  /*
   *序列号
   */
  char *sn;
  /*
   *相：A相(1),B相(2),C相(3)
   */
  int32_t phase;
  /*
   * 电流有效值
   */
  float currenteffectivevalue;
  /*
   *电压
   */
  float batteryvoltage;
  /*
   *频率
   */
  float frequency;
  /*
   * 温度
   */
  float temperature;
  /*
   *湿度
   */
  float humidity;
  /*
   *有功功率
   */
  int32_t activepower;
  /*
   *无功功率
   */
  int32_t reactivepower;
  /*
   *视在功率
   */
  int32_t apparentpower;
  /*
   *有功电能
   */
  int32_t activeenergy;
  /*
   *视在电能
   */
  int32_t apparentenergy;
  /*
   *瞬时电流
   */
  size_t n_instantaneouscurrent;
  int32_t *instantaneouscurrent;
};
#define SENSOR__SINGLE_PHASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor__single_phase__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


/*
 *三项或单项数组
 */
struct  _Sensor__ThreePhase
{
  ProtobufCMessage base;
  /*
   *SinglePhase类型的数组
   */
  size_t n_singlephases;
  Sensor__SinglePhase **singlephases;
};
#define SENSOR__THREE_PHASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor__three_phase__descriptor) \
    , 0,NULL }


/*
 *设备注册(激活):传感器，中继...
 */
struct  _Sensor__DeviceRegister
{
  ProtobufCMessage base;
  /*
   *序列号
   */
  char *sn;
  /*
   *设备类型
   */
  int32_t device_type;
};
#define SENSOR__DEVICE_REGISTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor__device_register__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 *收到消息类型
 */
struct  _Sensor__Message
{
  ProtobufCMessage base;
  /*
   * 消息类型:SinglePhase类型(1)，ThreePhase类型(2)，传感器注册数据类型(3)....
   */
  int32_t message_type;
  /*
   * 单项传感器数据
   */
  Sensor__SinglePhase *singlephase;
  /*
   * 多项传感器数据
   */
  Sensor__ThreePhase *threephase;
  /*
   * 注册信息
   */
  Sensor__DeviceRegister *register_;
};
#define SENSOR__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor__message__descriptor) \
    , 0, NULL, NULL, NULL }


/* Sensor__SinglePhase methods */
void   sensor__single_phase__init
                     (Sensor__SinglePhase         *message);
size_t sensor__single_phase__get_packed_size
                     (const Sensor__SinglePhase   *message);
size_t sensor__single_phase__pack
                     (const Sensor__SinglePhase   *message,
                      uint8_t             *out);
size_t sensor__single_phase__pack_to_buffer
                     (const Sensor__SinglePhase   *message,
                      ProtobufCBuffer     *buffer);
Sensor__SinglePhase *
       sensor__single_phase__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor__single_phase__free_unpacked
                     (Sensor__SinglePhase *message,
                      ProtobufCAllocator *allocator);
/* Sensor__ThreePhase methods */
void   sensor__three_phase__init
                     (Sensor__ThreePhase         *message);
size_t sensor__three_phase__get_packed_size
                     (const Sensor__ThreePhase   *message);
size_t sensor__three_phase__pack
                     (const Sensor__ThreePhase   *message,
                      uint8_t             *out);
size_t sensor__three_phase__pack_to_buffer
                     (const Sensor__ThreePhase   *message,
                      ProtobufCBuffer     *buffer);
Sensor__ThreePhase *
       sensor__three_phase__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor__three_phase__free_unpacked
                     (Sensor__ThreePhase *message,
                      ProtobufCAllocator *allocator);
/* Sensor__DeviceRegister methods */
void   sensor__device_register__init
                     (Sensor__DeviceRegister         *message);
size_t sensor__device_register__get_packed_size
                     (const Sensor__DeviceRegister   *message);
size_t sensor__device_register__pack
                     (const Sensor__DeviceRegister   *message,
                      uint8_t             *out);
size_t sensor__device_register__pack_to_buffer
                     (const Sensor__DeviceRegister   *message,
                      ProtobufCBuffer     *buffer);
Sensor__DeviceRegister *
       sensor__device_register__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor__device_register__free_unpacked
                     (Sensor__DeviceRegister *message,
                      ProtobufCAllocator *allocator);
/* Sensor__Message methods */
void   sensor__message__init
                     (Sensor__Message         *message);
size_t sensor__message__get_packed_size
                     (const Sensor__Message   *message);
size_t sensor__message__pack
                     (const Sensor__Message   *message,
                      uint8_t             *out);
size_t sensor__message__pack_to_buffer
                     (const Sensor__Message   *message,
                      ProtobufCBuffer     *buffer);
Sensor__Message *
       sensor__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor__message__free_unpacked
                     (Sensor__Message *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Sensor__SinglePhase_Closure)
                 (const Sensor__SinglePhase *message,
                  void *closure_data);
typedef void (*Sensor__ThreePhase_Closure)
                 (const Sensor__ThreePhase *message,
                  void *closure_data);
typedef void (*Sensor__DeviceRegister_Closure)
                 (const Sensor__DeviceRegister *message,
                  void *closure_data);
typedef void (*Sensor__Message_Closure)
                 (const Sensor__Message *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sensor__single_phase__descriptor;
extern const ProtobufCMessageDescriptor sensor__three_phase__descriptor;
extern const ProtobufCMessageDescriptor sensor__device_register__descriptor;
extern const ProtobufCMessageDescriptor sensor__message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sensor_2eproto__INCLUDED */
